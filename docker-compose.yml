services:
  # Ingestion Database
  ingestion_postgres:
    image: postgres:15-alpine
    container_name: iot_ingestion_postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${INGESTION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${INGESTION_POSTGRES_PASSWORD}
      POSTGRES_DB: ${INGESTION_POSTGRES_DB}
    ports:
      - "${INGESTION_POSTGRES_PORT}:5432"
    volumes:
      - ingestion_postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${INGESTION_POSTGRES_USER} -d ${INGESTION_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - backend

  # Alerting Database
  alerting_postgres:
    image: postgres:15-alpine
    container_name: iot_alerting_postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${ALERTING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ALERTING_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ALERTING_POSTGRES_DB}
    ports:
      - "${ALERTING_POSTGRES_PORT}:5432"
    volumes:
      - alerting_postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ALERTING_POSTGRES_USER} -d ${ALERTING_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - backend

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iot_redis
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}" --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    networks:
      - backend

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: iot_rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - backend

  # Ingestion Service Migration
  ingestion_migration:
    build:
      context: ./ingestion_service
      dockerfile: Dockerfile
    container_name: iot_ingestion_migration
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${INGESTION_POSTGRES_SERVER}
      POSTGRES_USER: ${INGESTION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${INGESTION_POSTGRES_PASSWORD}
      POSTGRES_DB: ${INGESTION_POSTGRES_DB}
      POSTGRES_PORT: 5432
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      ingestion_postgres:
        condition: service_healthy
    volumes:
      - ./ingestion_service:/app
    command: >
      sh -c "
        echo 'Waiting for ingestion database to be ready...' &&
        sleep 10 &&
        echo 'Running ingestion service migrations...' &&
        python migrate.py upgrade &&
        echo 'Ingestion migrations completed!'
      "
    restart: "no"
    networks:
      - backend

  # Alerting Service Migration  
  alerting_migration:
    build:
      context: ./alerting_service
      dockerfile: Dockerfile
    container_name: iot_alerting_migration
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${ALERTING_POSTGRES_SERVER}
      POSTGRES_USER: ${ALERTING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ALERTING_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ALERTING_POSTGRES_DB}
      POSTGRES_PORT: 5432
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      SPEED_VIOLATION_THRESHOLD: ${SPEED_VIOLATION_THRESHOLD}
      AUTHORIZED_USERS_CACHE_TTL: ${AUTHORIZED_USERS_CACHE_TTL}
    depends_on:
      alerting_postgres:
        condition: service_healthy
    volumes:
      - ./alerting_service:/app
    command: >
      sh -c "
        echo 'Waiting for alerting database to be ready...' &&
        sleep 10 &&
        echo 'Running alerting service migrations...' &&
        python migrate.py upgrade &&
        echo 'Alerting migrations completed!'
      "
    restart: "no"
    networks:
      - backend

  # Ingestion Service
  ingestion_service:
    build:
      context: ./ingestion_service
      dockerfile: Dockerfile
    container_name: iot_ingestion
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${INGESTION_POSTGRES_SERVER}
      POSTGRES_USER: ${INGESTION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${INGESTION_POSTGRES_PASSWORD}
      POSTGRES_DB: ${INGESTION_POSTGRES_DB}
      POSTGRES_PORT: 5432
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${INGESTION_PORT}:8000"
    depends_on:
      ingestion_postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      ingestion_migration:
        condition: service_completed_successfully
    volumes:
      - ./ingestion_service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - backend
      - frontend
    command: >
      sh -c "
        echo 'Waiting for dependencies to be ready...' &&
        sleep 15 &&
        echo 'Starting Ingestion Service...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info --workers 2
      "

  # Alerting Service
  alerting_service:
    build:
      context: ./alerting_service
      dockerfile: Dockerfile
    container_name: iot_alerting
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${ALERTING_POSTGRES_SERVER}
      POSTGRES_USER: ${ALERTING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ALERTING_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ALERTING_POSTGRES_DB}
      POSTGRES_PORT: 5432
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      SPEED_VIOLATION_THRESHOLD: ${SPEED_VIOLATION_THRESHOLD}
      AUTHORIZED_USERS_CACHE_TTL: ${AUTHORIZED_USERS_CACHE_TTL}
    ports:
      - "${ALERTING_PORT}:8000"
    depends_on:
      alerting_postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      ingestion_service:
        condition: service_healthy
      alerting_migration:
        condition: service_completed_successfully
    volumes:
      - ./alerting_service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - backend
      - frontend
    command: >
      sh -c "
        echo 'Waiting for dependencies and migrations...' &&
        sleep 20 &&
        echo 'Starting Alerting Service...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info --workers 2
      "

volumes:
  ingestion_postgres_data:
    driver: local
  alerting_postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  frontend:
    name: iot_frontend
    driver: bridge
  backend:
    name: iot_backend
    driver: bridge
    internal: true
